package com.github.crehn.pantarhei.boundary;

import static javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR;

import java.net.URI;
import java.util.UUID;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status.Family;
import javax.ws.rs.core.Response.StatusType;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

import org.jboss.resteasy.spi.DefaultOptionsMethodException;

import lombok.Builder;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Provider
public class AnnotatedExceptionMapper implements ExceptionMapper<Exception> {
    private static final String CONTENT_TYPE = "application/problem+json";
    private static final String URN_PROBLEM_PREFIX = "urn:problem:";

    // TODO: merge with https://github.com/t1/problem-detail as soon as it can be retrieved from bintray
    @Value
    @Builder
    public static class Problem {
        private static final String URN_PROBLEM_INSTANCE_PREFIX = "urn:problem-instance:";

        /**
         * SHOULD be stable across versions. SHOULD identify a problem class uniquely.
         */
        URI type;

        /**
         * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of
         * the problem, except for purposes of localization.
         */
        String title;

        /**
         * The HTTP status code generated by the origin server for this occurrence of the problem.
         */
        StatusType status;

        /**
         * The full, human-readable explanation specific to this occurrence of the problem. It MAY change from
         * occurrence to occurrence of the problem.
         */
        String detail;

        /**
         * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further
         * information if dereferenced.
         */
        URI instance = URI.create(URN_PROBLEM_INSTANCE_PREFIX + UUID.randomUUID());
    }

    @Override
    public Response toResponse(Exception exception) {
        if (exception instanceof DefaultOptionsMethodException)
            return ((DefaultOptionsMethodException) exception).getResponse();

        Response response;
        Problem problem;
        MapToProblem annotation = exception.getClass().getAnnotation(MapToProblem.class);
        if (annotation != null) {
            problem = toProblem(exception, annotation);
            response = toResponse(annotation.status(), problem);
        } else if (exception instanceof WebApplicationException) {
            WebApplicationException webApplicationException = (WebApplicationException) exception;
            problem = toProblem(webApplicationException);
            response = toResponse(webApplicationException, problem);
        } else {
            problem = defaultProblem(exception);
            response = toResponse(INTERNAL_SERVER_ERROR, problem);
            log.error("Unexpected exception", exception);
        }
        if (isClientProblem(problem))
            log.debug("Mapping {} to {}; problem instance: {}", exception.getClass().getName(), response.getStatus(),
                    problem.getInstance());
        else
            log.warn("Mapping {} to {}; problem instance: {}", exception.getClass().getName(), response.getStatus(),
                    problem.getInstance());
        return response;
    }

    private Problem toProblem(Exception exception, MapToProblem annotation) {
        return Problem.builder() //
                .type(URI.create(URN_PROBLEM_PREFIX + exception.getClass().getName())) //
                .title(annotation.title()) //
                .status(annotation.status()) //
                .detail(exception.getMessage()) //
                .build();
    }

    private Response toResponse(StatusType status, Problem problem) {
        return Response //
                .status(status) //
                .type(CONTENT_TYPE) //
                .entity(problem) //
                .build();
    }

    private Problem toProblem(WebApplicationException webApplicationException) {
        StatusType status = webApplicationException.getResponse().getStatusInfo();
        return Problem.builder() //
                .type(URI.create(URN_PROBLEM_PREFIX + webApplicationException.getClass().getName() + ":"
                        + status.getStatusCode()))//
                .title(status.getReasonPhrase()) //
                .status(status) //
                .detail(webApplicationException.getMessage()) //
                .build();
    }

    private Response toResponse(WebApplicationException webApplicationException, Problem problem) {
        return Response.fromResponse(webApplicationException.getResponse()) //
                .type(CONTENT_TYPE) //
                .entity(problem) //
                .build();
    }

    private Problem defaultProblem(Exception exception) {
        return Problem.builder() //
                .type(URI.create(URN_PROBLEM_PREFIX + exception.getClass().getName())) //
                .title("a problem occured") //
                .status(INTERNAL_SERVER_ERROR) //
                .detail(exception.getMessage()) //
                .build();
    }

    private boolean isClientProblem(Problem problem) {
        return problem.getStatus().getFamily() != Family.SERVER_ERROR;
    }
}
